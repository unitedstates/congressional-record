"""
Pydantic models defining the schema for Congressional Record JSON output.

This module provides type-safe models for the JSON structure generated by the
congressional record parser.
"""

from typing import List, Literal, Optional

from pydantic import BaseModel, Field


class Header(BaseModel):
    """Metadata about the Congressional Record issue."""

    vol: str = Field(..., description="Volume number of the Congressional Record")
    num: str = Field(..., description="Issue number within the volume")
    wkday: str = Field(..., description="Day of the week (e.g., 'Thursday')")
    month: str = Field(..., description="Month name (e.g., 'January')")
    day: str = Field(..., description="Day of the month")
    year: str = Field(..., description="Year (e.g., '2025')")
    chamber: str = Field(
        ..., description="Chamber of Congress ('Senate' or 'House')"
    )
    pages: str = Field(
        ..., description="Page range in the Congressional Record (e.g., 'S520-S523')"
    )
    extension: bool = Field(
        ..., description="Whether this is from Extensions of Remarks section"
    )


class RelatedBill(BaseModel):
    """Reference to a bill mentioned in the Congressional Record."""

    congress: str = Field(..., description="Congress number (e.g., '119')")
    context: str = Field(
        ..., description="Context of the bill reference (e.g., 'OTHER')"
    )
    number: str = Field(..., description="Bill number")
    type: str = Field(
        ..., description="Bill type (e.g., 'SRES' for Senate Resolution)"
    )


class RelatedLaw(BaseModel):
    """Reference to a law mentioned in the Congressional Record."""

    # Based on code analysis from find_related_laws() in cr_parser.py
    # The exact structure depends on the XML attributes in the source
    # This is a placeholder that should be refined based on actual examples
    pass


class RelatedUSC(BaseModel):
    """Reference to U.S. Code mentioned in the Congressional Record."""

    title: str = Field(..., description="Title of the U.S. Code")
    # Additional fields from section attributes would be added here
    # Based on find_related_usc() in cr_parser.py


class RelatedStatute(BaseModel):
    """Reference to Statutes at Large mentioned in the Congressional Record."""

    volume: str = Field(..., description="Volume of Statutes at Large")
    # Additional fields from pages attributes would be added here
    # Based on find_related_statute() in cr_parser.py


class ContentItem(BaseModel):
    """A single item of content from the Congressional Record (speech, note, etc.)."""

    kind: str = Field(
        ...,
        description=(
            "Type of content item: 'speech', 'recorder', 'clerk', 'linebreak', "
            "'excerpt', 'rollcall', 'metacharacters', 'empty_line', 'title', or 'Unknown'"
        ),
    )
    speaker: str = Field(
        ..., description="Name of the speaker or 'Unknown' if not identified"
    )
    speaker_bioguide: Optional[str] = Field(
        None,
        description="Bioguide ID of the speaker if matched to a Congress member",
    )
    text: str = Field(..., description="Full text content of the item")
    turn: int = Field(
        ...,
        description=(
            "Turn number for tracking sequential speeches by the same member. "
            "-1 for non-speech items."
        ),
    )
    itemno: int = Field(
        ..., description="Sequential item number within this document"
    )


class CongressionalRecordDocument(BaseModel):
    """Complete Congressional Record document parsed from HTML."""

    id: str = Field(
        ...,
        description="Unique identifier for this document (e.g., 'CREC-2025-01-30-pt1-PgS520')",
    )
    header: Header = Field(..., description="Metadata about the Congressional Record issue")
    doc_title: str = Field(
        ..., description="Title of the document from metadata"
    )
    title: Optional[str] = Field(
        None, description="Title parsed from the document content (all-caps heading)"
    )
    content: List[ContentItem] = Field(
        ..., description="List of content items (speeches, notes, etc.)"
    )
    related_bills: Optional[List[RelatedBill]] = Field(
        None, description="Bills referenced in this document"
    )
    related_laws: Optional[List[RelatedLaw]] = Field(
        None, description="Laws referenced in this document"
    )
    related_usc: Optional[List[RelatedUSC]] = Field(
        None, description="U.S. Code sections referenced in this document"
    )
    related_statute: Optional[List[RelatedStatute]] = Field(
        None, description="Statutes at Large referenced in this document"
    )

    class Config:
        json_schema_extra = {
            "example": {
                "id": "CREC-2025-01-30-pt1-PgS520",
                "header": {
                    "vol": "171",
                    "num": "20",
                    "wkday": "Thursday",
                    "month": "January",
                    "day": "30",
                    "year": "2025",
                    "chamber": "Senate",
                    "pages": "S520-S523",
                    "extension": False,
                },
                "doc_title": "EXECUTIVE AND OTHER COMMUNICATIONS",
                "title": "EXECUTIVE AND OTHER COMMUNICATIONS",
                "content": [
                    {
                        "kind": "Unknown",
                        "speaker": "Unknown",
                        "speaker_bioguide": None,
                        "text": "The following communications were laid before the Senate...",
                        "turn": -1,
                        "itemno": 0,
                    }
                ],
                "related_bills": [
                    {
                        "congress": "119",
                        "context": "OTHER",
                        "number": "47",
                        "type": "SRES",
                    }
                ],
            }
        }
